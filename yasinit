#!/usr/bin/env python3

# Copyright 2018, 2020 Andreas Kr√ºger, andreas.krueger@famsik.de
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you
# may not use this file except in compliance with the License. You may
# obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.

import glob, logging, logging.handlers, os, queue, signal, subprocess, sys, threading, time

TIMEOUT = 20.0 # seconds after termination before I give up.

logger = logging.getLogger('yasinit')
logger.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s %(name)s %(levelname)s %(message)s')
stderr_handler = logging.StreamHandler()
stderr_handler.setFormatter(formatter)
logger.addHandler(stderr_handler)

# This causes exceptions if /dev/log is no longer handled:
# syslog_handler = logging.handlers.SysLogHandler(address='/dev/log', facility=logging.handlers.SysLogHandler.LOG_DAEMON)
# syslog_handler.setFormatter(formatter)
# logger.addHandler(syslog_handler)

# The set of PIDs of the programms we actually watch.
# But we don't restart them. Failure of any of these processes
# will terminate the whole thing.
guarded_pids = set()

# For friendly logging, let's remember what we started:
pid2runme = {}

# We will exit with 0 only if all processes we watched terminated regularily with 0.
own_exit_value = 0

# Internal state: Whether we are in the process of shutting down.
presently_terminating = False

# Here is the lock we use so signal handlers
# and main thread do not interfere hanging data:
lock = threading.Lock()

# When we decide to terminate, we send a SIGTERM to all our guarded processes
# (this is always called by a thread that has the lock):
def terminate():
    global presently_terminating # Call only if you have the lock
    if not presently_terminating:
        presently_terminating = True
        logger.info("Orderly shutdown initiated.")
        for pid in guarded_pids:
            logger.info("Sending SIGTERM to %s (pid %s)", pid2runme[pid], pid)
            os.kill(pid, signal.SIGTERM)

threads_to_be_joined = queue.Queue()

def log_and_determine_own_exit_value(pid, exitstatus):
    global own_exit_value

    if pid in pid2runme:
        command = pid2runme[pid]
    else:
        # I don't think this can happen:
        logger.error("Internal bug: Guarded process pid %s apparently started by us, but maybe not???", pid)
        command = "???"

    if os.WIFEXITED(exitstatus):
        if 0 == os.WEXITSTATUS(exitstatus):
            logger.info("Guarded process %s (pid %s) terminated with exit status 0.", command, pid)
        else:
            logger.warning("Guarded process %s (pid %s) terminated with exit status %s", command, pid, os.WEXITSTATUS(exitstatus))
            if own_exit_value == 0:
                own_exit_value = os.WEXITSTATUS(exitstatus)
    elif os.WIFSIGNALED(exitstatus):
        logger.warning("Guarded process %s (pid %s) terminated by signal %s it didn't handle.", command, pid, os.WTERMSIG(exitstatus))
        if own_exit_value == 0:
            own_exit_value = 1
    else:
        logger.error("Do not understand the exit status. Terminating anyway. %s (pid %s), raw exitvalue %s", command, pid, exitstatus)
        
# Here is the signal handler that handles the termination of a child.

def sigchld_handler(signo, stackframe):
    while True:
        # We try to collect what we can:
        try:
            (pid, exitstatus) = os.waitpid(-1, os.WNOHANG)
        except ChildProcessError:
            break

        if pid == 0:
            # We have children that are still running happily.
            # Or maybe they were stopped.
            break
        else:
            # It is not prudent to try to acquire a lock
            # that the main thread holds, as it cannot release that lock
            # while the signal handler runs (which it does not the main thread as well).
            # So delegate all real functionality to a thread.
            def handle_pid_in_thread(copy_of_pid):
                def handle_in_thread():
                    threads_to_be_joined.put(threading.current_thread())
                    with lock:
                        if copy_of_pid in guarded_pids:
                            guarded_pids.discard(copy_of_pid)
                            log_and_determine_own_exit_value(copy_of_pid, exitstatus)
                            terminate()
                        else:
                            logger.info("Collected spurious child %s.", copy_of_pid)
                threading.Thread(target = handle_in_thread).start()
            handle_pid_in_thread(pid)

signal.signal(signal.SIGCHLD, sigchld_handler)

def sigterm_handler(signo, stackframe):
    def handle_in_thread():
        threads_to_be_joined.put(threading.current_thread())
        with lock:
            terminate()
    threading.Thread(target = handle_in_thread).start()

signal.signal(signal.SIGTERM, sigterm_handler)

if 1 <= len(sys.argv[1:]):
    commands = [sys.argv[1:]]
else:
    commands = [[runme] for runme in glob.glob("/etc/yasinit/*.run")]

logger.info("Starting commands: %s.", commands)

for runme in commands:
    with lock:
      if not presently_terminating:
          p = subprocess.Popen(runme, stdin = subprocess.DEVNULL)
          logger.info("Command %s started as pid %s.", runme, p.pid)
          pid2runme[p.pid] = runme
          guarded_pids.add(p.pid)
          if presently_terminating:
              logger.warning("Terminating %s (pid %s) immediatly as shutdown has been initiated.", runme, p.pid)
              os.kill(p.pid, signal.SIGTERM)
      else:
          logger.warning("Command %s not even started because of previous failure.", runme)

while True:
    with lock:
        if 0 == len(guarded_pids):
            terminate();
        if presently_terminating:
            break
    thread_to_join = threads_to_be_joined.get()
    thread_to_join.join()

now = time.time()
latest_end_of_show = now + TIMEOUT
while now <= latest_end_of_show:
    with lock:
        if 0 == len(guarded_pids):
            logger.info("May terminate successfully. Good.")
            break;
    logger.info("Expecting further developments.")
    try:
        thread_to_join = threads_to_be_joined.get(block = True, timeout = latest_end_of_show - now)
        thread_to_join.join()
    except queue.Empty:
        pass
    now = time.time()

with lock:
    if 0 < len(guarded_pids):
        logger.error("Shutdown failed, terminating even though some processes are still running. Pids: %s", guarded_pids)
        sys.exit(2)
    else:
        sys.exit(own_exit_value)
